{"ast":null,"code":"import axios from 'axios';\n\n// Get API URL from environment variable\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (refreshToken) {\n      try {\n        const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {}, {\n          headers: {\n            Authorization: `Bearer ${refreshToken}`\n          }\n        });\n        const newToken = response.data.access_token;\n        localStorage.setItem('access_token', newToken);\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\n        return api.request(originalRequest);\n      } catch (refreshError) {\n        // Refresh failed, redirect to login\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        window.location.href = '/login';\n      }\n    } else {\n      // No refresh token, redirect to login\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Types for API responses\n\n// Authentication API\nexport const authAPI = {\n  login: (username, password) => api.post('/auth/login', {\n    username,\n    password\n  }),\n  register: (username, email, password) => api.post('/auth/register', {\n    username,\n    email,\n    password\n  }),\n  logout: () => api.post('/auth/logout'),\n  getCurrentUser: () => api.get('/auth/me'),\n  refreshToken: () => api.post('/auth/refresh')\n};\n\n// Tickets API\nexport const ticketsAPI = {\n  getTickets: () => api.get('/tickets'),\n  createTicket: ticketData => api.post('/tickets', ticketData),\n  getTicket: id => api.get(`/tickets/${id}`),\n  updateTicket: (id, ticketData) => api.put(`/tickets/${id}`, ticketData),\n  replyToTicket: (id, message) => api.post(`/tickets/${id}/reply`, {\n    message\n  })\n};\n\n// Users API\nexport const usersAPI = {\n  getUsers: () => api.get('/users'),\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: profileData => api.put('/users/profile', profileData),\n  getUserByUsername: username => api.get(`/users/${username}`)\n};\n\n// Client API (public endpoints)\nexport const clientAPI = {\n  submitTicket: ticketData => axios.post(`${API_BASE_URL}/client/submit-ticket`, ticketData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  getTicketStatus: referenceNumber => axios.get(`${API_BASE_URL}/client/ticket-status/${referenceNumber}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","originalRequest","status","_retry","refreshToken","post","newToken","data","access_token","setItem","refreshError","removeItem","window","location","href","Promise","reject","authAPI","login","username","password","register","email","logout","getCurrentUser","get","ticketsAPI","getTickets","createTicket","ticketData","getTicket","id","updateTicket","put","replyToTicket","message","usersAPI","getUsers","getProfile","updateProfile","profileData","getUserByUsername","clientAPI","submitTicket","getTicketStatus","referenceNumber"],"sources":["/home/k4r4b0/Desktop/Projects/Python/Omnidesk/frontend_new/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\n// Get API URL from environment variable\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      const refreshToken = localStorage.getItem('refresh_token');\n      if (refreshToken) {\n        try {\n          const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {}, {\n            headers: { Authorization: `Bearer ${refreshToken}` },\n          });\n          \n          const newToken = response.data.access_token;\n          localStorage.setItem('access_token', newToken);\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\n          \n          return api.request(originalRequest);\n        } catch (refreshError) {\n          // Refresh failed, redirect to login\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          window.location.href = '/login';\n        }\n      } else {\n        // No refresh token, redirect to login\n        window.location.href = '/login';\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Types for API responses\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  about_me?: string;\n  last_seen?: string;\n  is_admin?: boolean;\n}\n\nexport interface Ticket {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: string;\n  created_at: string;\n  created_by?: {\n    id: number;\n    username: string;\n  };\n  assigned_to?: {\n    id: number;\n    username: string;\n  };\n  client_info?: {\n    name: string;\n    surname: string;\n    email: string;\n    phone: string;\n    images: string[];\n  };\n}\n\nexport interface LoginResponse {\n  access_token: string;\n  refresh_token: string;\n  user: User;\n}\n\nexport interface TicketsResponse {\n  tickets: Ticket[];\n}\n\nexport interface UsersResponse {\n  users: User[];\n}\n\n// Authentication API\nexport const authAPI = {\n  login: (username: string, password: string): Promise<AxiosResponse<LoginResponse>> =>\n    api.post('/auth/login', { username, password }),\n    \n  register: (username: string, email: string, password: string): Promise<AxiosResponse<LoginResponse>> =>\n    api.post('/auth/register', { username, email, password }),\n    \n  logout: (): Promise<AxiosResponse<{ message: string }>> =>\n    api.post('/auth/logout'),\n    \n  getCurrentUser: (): Promise<AxiosResponse<User>> =>\n    api.get('/auth/me'),\n    \n  refreshToken: (): Promise<AxiosResponse<{ access_token: string }>> =>\n    api.post('/auth/refresh'),\n};\n\n// Tickets API\nexport const ticketsAPI = {\n  getTickets: (): Promise<AxiosResponse<TicketsResponse>> =>\n    api.get('/tickets'),\n    \n  createTicket: (ticketData: {\n    title: string;\n    description: string;\n    priority?: string;\n    assigned_to_id?: number;\n  }): Promise<AxiosResponse<{ message: string; ticket: Ticket }>> =>\n    api.post('/tickets', ticketData),\n    \n  getTicket: (id: number): Promise<AxiosResponse<Ticket>> =>\n    api.get(`/tickets/${id}`),\n    \n  updateTicket: (id: number, ticketData: {\n    title?: string;\n    description?: string;\n    status?: string;\n    priority?: string;\n    assigned_to_id?: number;\n  }): Promise<AxiosResponse<{ message: string; ticket: Ticket }>> =>\n    api.put(`/tickets/${id}`, ticketData),\n    \n  replyToTicket: (id: number, message: string): Promise<AxiosResponse<{ message: string }>> =>\n    api.post(`/tickets/${id}/reply`, { message }),\n};\n\n// Users API\nexport const usersAPI = {\n  getUsers: (): Promise<AxiosResponse<UsersResponse>> =>\n    api.get('/users'),\n    \n  getProfile: (): Promise<AxiosResponse<User>> =>\n    api.get('/users/profile'),\n    \n  updateProfile: (profileData: {\n    username?: string;\n    email?: string;\n    about_me?: string;\n  }): Promise<AxiosResponse<{ message: string; user: User }>> =>\n    api.put('/users/profile', profileData),\n    \n  getUserByUsername: (username: string): Promise<AxiosResponse<User>> =>\n    api.get(`/users/${username}`),\n};\n\n// Client API (public endpoints)\nexport const clientAPI = {\n  submitTicket: (ticketData: FormData): Promise<AxiosResponse<{\n    message: string;\n    ticket_id: number;\n    reference_number: string;\n  }>> =>\n    axios.post(`${API_BASE_URL}/client/submit-ticket`, ticketData, {\n      headers: { 'Content-Type': 'multipart/form-data' },\n    }),\n    \n  getTicketStatus: (referenceNumber: string): Promise<AxiosResponse<{\n    reference_number: string;\n    status: string;\n    submitted_at: string;\n    description: string;\n  }>> =>\n    axios.get(`${API_BASE_URL}/client/ticket-status/${referenceNumber}`),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}